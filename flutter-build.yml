name: Build AAB (Agenda de Bienestar)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable

      - name: Create Flutter project and app files
        run: |
          flutter create .
          cat > pubspec.yaml << 'PUB'
name: agenda_bienestar
description: Agenda de Bienestar & Productividad (AdMob + aviso de salida)
publish_to: "none"
version: 1.0.1+2
environment:
  sdk: ">=3.1.0 <4.0.0"
dependencies:
  flutter:
    sdk: flutter
  cupertino_icons: ^1.0.6
  google_mobile_ads: ^5.1.0
  shared_preferences: ^2.3.2
  url_launcher: ^6.3.0
flutter:
  uses-material-design: true
PUB

          mkdir -p lib
          cat > lib/main.dart << 'DART'
import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:google_mobile_ads/google_mobile_ads.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:url_launcher/url_launcher.dart';

const String kAdmobAppId = "ca-app-pub-3271573238193487~1404730671";
const String kAdmobBannerId = "ca-app-pub-3271573238193487/9120952051";
const String kAdmobInterstitialId = "ca-app-pub-3271573238193487/4346874199";

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await MobileAds.instance.initialize();
  runApp(const AgendaApp());
}

class AgendaApp extends StatelessWidget {
  const AgendaApp({super.key});
  @override
  Widget build(BuildContext context) => MaterialApp(
    title: 'Agenda de Bienestar',
    theme: ThemeData(colorScheme: ColorScheme.fromSeed(seedColor: Colors.indigo), useMaterial3: true),
    home: const AgendaHome(),
  );
}

class AgendaHome extends StatefulWidget { const AgendaHome({super.key}); @override State<AgendaHome> createState()=>_AgendaHomeState(); }
class _AgendaHomeState extends State<AgendaHome> {
  List<Map<String, dynamic>> tasks = [];
  final TextEditingController ctrl = TextEditingController();
  int completedCount = 0;
  InterstitialAd? _interstitial;

  @override void initState() { super.initState(); _load(); _loadInterstitial(); }
  Future<void> _load() async {
    final sp = await SharedPreferences.getInstance();
    tasks = (json.decode(sp.getString('tasks') ?? '[]') as List).cast<Map<String, dynamic>>();
    completedCount = tasks.where((t)=>t['done']==true).length;
    setState((){});
  }
  Future<void> _save() async { final sp = await SharedPreferences.getInstance(); await sp.setString('tasks', json.encode(tasks)); }

  void _loadInterstitial() {
    InterstitialAd.load(
      adUnitId: kAdmobInterstitialId,
      request: const AdRequest(),
      adLoadCallback: InterstitialAdLoadCallback(onAdLoaded:(ad)=>_interstitial=ad,onAdFailedToLoad:(_)=>_interstitial=null),
    );
  }
  void _maybeShowInterstitial() {
    if (_interstitial==null) return;
    if (completedCount>0 && completedCount%3==0) { _interstitial?.show(); _interstitial=null; _loadInterstitial(); }
  }

  Future<void> _openLinktreeWithConfirm() async {
    final ok = await showDialog<bool>(
      context: context,
      builder: (_) => AlertDialog(
        title: const Text('Abrir enlace externo'),
        content: const Text('Vas a salir de la app para visitar un sitio externo (Linktree). ¿Deseas continuar?'),
        actions: [
          TextButton(onPressed: () => Navigator.pop(context, false), child: const Text('Cancelar')),
          ElevatedButton(onPressed: () => Navigator.pop(context, true), child: const Text('Sí, continuar')),
        ],
      ),
    ) ?? false;
    if (ok) {
      final uri = Uri.parse('https://linktr.ee/erjovelazo');
      if (await canLaunchUrl(uri)) { await launchUrl(uri, mode: LaunchMode.externalApplication); }
    }
  }

  @override
  Widget build(BuildContext context) => Scaffold(
    appBar: AppBar(title: const Text('Agenda de Bienestar & Productividad'), actions:[IconButton(onPressed:_openLinktreeWithConfirm, icon: const Icon(Icons.link))]),
    bottomNavigationBar: const _BannerAdWidget(),
    body: Padding(
      padding: const EdgeInsets.all(16.0),
      child: Column(children: [
        Row(children: [
          Expanded(child: TextField(controller: ctrl, decoration: const InputDecoration(hintText:'Añade un hábito o tarea (ej. Beber 8 vasos de agua)'))),
          const SizedBox(width:8),
          ElevatedButton(onPressed: (){ if (ctrl.text.trim().isEmpty) return; tasks.add({"text":ctrl.text.trim(),"done":false}); ctrl.clear(); _save(); setState((){}); }, child: const Text('Agregar'))
        ]),
        const SizedBox(height:12),
        Expanded(child: ListView.separated(
          itemCount: tasks.length,
          separatorBuilder: (_, __)=>const Divider(),
          itemBuilder: (context, index){
            final t = tasks[index];
            return ListTile(
              leading: Checkbox(value: t['done']==true, onChanged: (v){ t['done']=v==true; completedCount = tasks.where((t)=>t['done']==true).length; _maybeShowInterstitial(); _save(); setState((){}); }),
              title: Text(t['text']),
              trailing: IconButton(icon: const Icon(Icons.delete_forever), onPressed: (){ tasks.removeAt(index); completedCount = tasks.where((t)=>t['done']==true).length; _save(); setState((){}); }),
            );
          }
        ))
      ]),
    ),
  );
}

class _BannerAdWidget extends StatefulWidget { const _BannerAdWidget({super.key}); @override State<_BannerAdWidget> createState()=>_BannerAdWidgetState(); }
class _BannerAdWidgetState extends State<_BannerAdWidget> {
  BannerAd? _ad;
  @override void initState() {
    super.initState();
    _ad = BannerAd(size: AdSize.banner, adUnitId: kAdmobBannerId, request: const AdRequest(), listener: BannerAdListener(onAdFailedToLoad:(ad,e)=>ad.dispose()))..load();
  }
  @override void dispose() { _ad?.dispose(); super.dispose(); }
  @override Widget build(BuildContext c) => _ad==null ? const SizedBox.shrink() : SizedBox(height:_ad!.size.height.toDouble(), width:_ad!.size.width.toDouble(), child: AdWidget(ad:_ad!));
}
DART

          # Cambia el package e inyecta App ID
          sed -i 's/package="com.example.agenda_bienestar"/package="com.erjovelazo.agenda"/' android/app/src/main/AndroidManifest.xml
          awk '1;/<application/{print "        <meta-data android:name=\"com.google.android.gms.ads.APPLICATION_ID\" android:value=\"ca-app-pub-3271573238193487~1404730671\" />"}' android/app/src/main/AndroidManifest.xml > tmp && mv tmp android/app/src/main/AndroidManifest.xml

      - name: Create or load signing keystore
        run: |
          mkdir -p android/app
          if [ -n "${{ secrets.KEYSTORE_BASE64 }}" ]; then
            echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > android/app/upload-keystore.jks
            STORE_PW="${{ secrets.STORE_PASSWORD }}"; KEY_PW="${{ secrets.KEY_PASSWORD }}"; ALIAS="${{ secrets.KEY_ALIAS }}"
          else
            STORE_PW="Abc12345"; KEY_PW="Abc12345"; ALIAS="upload"
            keytool -genkey -v -keystore android/app/upload-keystore.jks -storepass "$STORE_PW" -keypass "$KEY_PW" -keyalg RSA -keysize 2048 -validity 10000 -alias "$ALIAS" -dname "CN=Agenda,O=EB,L=Santiago,C=CL"
            base64 android/app/upload-keystore.jks > keystore_base64.txt
          fi
          cat > android/key.properties << EOF
storePassword=$STORE_PW
keyPassword=$KEY_PW
keyAlias=$ALIAS
storeFile=app/upload-keystore.jks
EOF

      - name: Patch android/app/build.gradle for release signing
        run: |
          cat > android/app/build.gradle << 'GRADLE'
def localProps = new Properties()
def localPropsFile = rootProject.file('local.properties')
if (localPropsFile.exists()) localPropsFile.withReader('UTF-8') { reader -> localProps.load(reader) }

def flutterRoot = localProps.getProperty('flutter.sdk')
assert flutterRoot != null, "Flutter SDK not found."
apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    namespace "com.erjovelazo.agenda"
    compileSdkVersion flutter.compileSdkVersion
    ndkVersion flutter.ndkVersion

    defaultConfig {
        applicationId "com.erjovelazo.agenda"
        minSdkVersion flutter.minSdkVersion
        targetSdkVersion flutter.targetSdkVersion
        versionCode 2
        versionName "1.0.1"
    }

    signingConfigs {
        release {
            def keystoreProperties = new Properties()
            def keystorePropertiesFile = rootProject.file('android/key.properties')
            if (keystorePropertiesFile.exists()) {
                keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
            }
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            shrinkResources false
        }
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.9.24"
}
GRADLE

      - name: Flutter pub get
        run: flutter pub get

      - name: Build AAB
        run: flutter build appbundle --release

      - name: Upload AAB artifact
        uses: actions/upload-artifact@v4
        with:
          name: AgendaBienestar-AAB
          path: build/app/outputs/bundle/release/app-release.aab

      - name: Upload keystore (first time only)
        if: ${{ !secrets.KEYSTORE_BASE64 }}
        uses: actions/upload-artifact@v4
        with:
          name: upload-keystore-base64
          path: keystore_base64.txt
          
