name: Build Flutter/Android from ZIP

on:
  workflow_dispatch:

jobs:
  build-android:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      # Tener Flutter disponible no estorba, y se usar√° si el ZIP es un proyecto Flutter
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.22.0'

      # üîΩ Cambia solo el nombre del ZIP si usas otro archivo
      - name: Define ZIP to use
        run: echo "PROJECT_ZIP=AgendaBienestarProyecto.zip" >> $GITHUB_ENV

      - name: Unzip project
        shell: bash
        run: |
          set -e
          if [ ! -f "$PROJECT_ZIP" ]; then
            echo "‚ùå No se encontr√≥ $PROJECT_ZIP en la ra√≠z del repo."
            echo "Contenido de la ra√≠z:"
            ls -la
            exit 1
          fi
          mkdir -p app_src
          unzip -q "$PROJECT_ZIP" -d app_src

          echo "üìÇ √Årbol (primeros niveles) del ZIP descomprimido:"
          find app_src -maxdepth 3 -type d -print

      - name: Detect project type (Flutter or Android Gradle)
        id: detect
        shell: bash
        run: |
          set -e

          # 1) Flutter: pubspec.yaml en alg√∫n punto dentro de app_src
          PUBSPEC_PATH=$(find app_src -maxdepth 3 -type f -name pubspec.yaml | head -n1 || true)
          if [ -n "$PUBSPEC_PATH" ]; then
            PROJECT_PATH=$(dirname "$PUBSPEC_PATH")
            echo "type=flutter" >> "$GITHUB_OUTPUT"
            echo "path=$PROJECT_PATH" >> "$GITHUB_OUTPUT"
            echo "‚úÖ Detectado proyecto Flutter en: $PROJECT_PATH"
            exit 0
          fi

          # 2) Android Gradle: settings.gradle o gradlew dentro de app_src
          ANDROID_ROOT=""
          if [ -f app_src/settings.gradle ] || [ -f app_src/settings.gradle.kts ]; then
            ANDROID_ROOT="app_src"
          else
            # buscar un settings.gradle dentro de subcarpetas
            SG=$(find app_src -maxdepth 3 -type f \( -name settings.gradle -o -name settings.gradle.kts \) | head -n1 || true)
            if [ -n "$SG" ]; then
              ANDROID_ROOT=$(dirname "$SG")
            fi
          fi

          if [ -n "$ANDROID_ROOT" ]; then
            echo "type=android" >> "$GITHUB_OUTPUT"
            echo "path=$ANDROID_ROOT" >> "$GITHUB_OUTPUT"
            echo "‚úÖ Detectado proyecto Android Gradle en: $ANDROID_ROOT"
            exit 0
          fi

          echo "‚ùå No se detect√≥ ni pubspec.yaml (Flutter) ni settings.gradle (Android)."
          echo "Estructura encontrada:"
          find app_src -maxdepth 3 -print
          exit 1

      # ---------- BUILD FLUTTER ----------
      - name: Install Flutter deps
        if: steps.detect.outputs.type == 'flutter'
        working-directory: ${{ steps.detect.outputs.path }}
        run: flutter pub get

      - name: Build Flutter APK
        if: steps.detect.outputs.type == 'flutter'
        working-directory: ${{ steps.detect.outputs.path }}
        run: flutter build apk --release

      - name: Build Flutter AAB
        if: steps.detect.outputs.type == 'flutter'
        working-directory: ${{ steps.detect.outputs.path }}
        run: flutter build appbundle --release

      # ---------- BUILD ANDROID GRADLE ----------
      - name: Prepare Gradle Wrapper
        if: steps.detect.outputs.type == 'android'
        working-directory: ${{ steps.detect.outputs.path }}
        shell: bash
        run: |
          set -e
          if [ -f gradlew ]; then
            chmod +x gradlew
          else
            echo "‚ö†Ô∏è No hay gradlew; creando wrapper‚Ä¶"
            # Intentar crear wrapper si hay build.gradle en la ra√≠z Android
            if grep -q "plugin" settings.gradle* || [ -f build.gradle ] || [ -f build.gradle.kts ]; then
              gradle wrapper
              chmod +x gradlew
            fi
          fi

      - name: Build Android APK (Gradle)
        if: steps.detect.outputs.type == 'android'
        working-directory: ${{ steps.detect.outputs.path }}
        run: ./gradlew :app:assembleRelease

      # ---------- ARTIFACTOS ----------
      - name: Upload Flutter artifacts
        if: steps.detect.outputs.type == 'flutter'
        uses: actions/upload-artifact@v4
        with:
          name: flutter-release
          path: |
            ${{ steps.detect.outputs.path }}/build/app/outputs/apk/release/*.apk
            ${{ steps.detect.outputs.path }}/build/app/outputs/bundle/release/*.aab
          if-no-files-found: warn

      - name: Upload Android APK artifact
        if: steps.detect.outputs.type == 'android'
        uses: actions/upload-artifact@v4
        with:
          name: android-apk-release
          path: |
            ${{ steps.detect.outputs.path }}/app/build/outputs/apk/release/*.apk
          if-no-files-found: warn
