workflows:
  android_debug_apk:
    name: Build React Native Android (Debug APK)
    instance_type: mac_mini_m1
    max_build_duration: 60

    environment:
      vars:
        # Evita interrupciones de prompts
        CI: true
      node: 18
      java: 17

    cache:
      cache_paths:
        - ~/.gradle/caches
        - ~/.gradle/wrapper
        - ~/.npm
        - ~/.cache/yarn

    scripts:
      - name: Mostrar versiones
        script: |
          node -v
          npm -v
          java -version
      - name: Instalar dependencias (npm ci con fallback)
        script: |
          npm ci || npm install
      - name: Sincronizar SDK de Android (aceptar licencias si hace falta)
        script: |
          set -e
          SDK_BIN="${ANDROID_SDK_ROOT:-$ANDROID_HOME}/cmdline-tools/latest/bin"
          if [ -x "$SDK_BIN/sdkmanager" ]; then
            yes | "$SDK_BIN/sdkmanager" --licenses || true
            "$SDK_BIN/sdkmanager" "platform-tools" "platforms;android-34" "build-tools;34.0.0" || true
          else
            echo "sdkmanager no encontrado; continuando (suele venir preinstalado en Codemagic)."
          fi
      - name: Preparar Gradle
        script: |
          cd android
          ./gradlew --no-daemon tasks
      - name: Compilar APK Debug
        script: |
          cd android
          ./gradlew --no-daemon assembleDebug

    artifacts:
      - android/app/build/outputs/apk/debug/app-debug.apk

  android_release_aab:
    name: Build React Native Android (Release AAB)
    instance_type: mac_mini_m1
    max_build_duration: 60

    environment:
      vars:
        CI: true
        # Rutas y nombres del keystore dentro del job
        CM_KEYSTORE_PATH: $CM_BUILD_DIR/android/keystore.jks
      node: 18
      java: 17
      groups:
        # (opcional) usa un grupo de variables seguro en Codemagic si lo creas
        # - signing

    cache:
      cache_paths:
        - ~/.gradle/caches
        - ~/.gradle/wrapper
        - ~/.npm
        - ~/.cache/yarn

    scripts:
      - name: Mostrar versiones
        script: |
          node -v
          npm -v
          java -version
      - name: Instalar dependencias (npm ci con fallback)
        script: |
          npm ci || npm install
      - name: Sincronizar SDK de Android (aceptar licencias si hace falta)
        script: |
          set -e
          SDK_BIN="${ANDROID_SDK_ROOT:-$ANDROID_HOME}/cmdline-tools/latest/bin"
          if [ -x "$SDK_BIN/sdkmanager" ]; then
            yes | "$SDK_BIN/sdkmanager" --licenses || true
            "$SDK_BIN/sdkmanager" "platform-tools" "platforms;android-34" "build-tools;34.0.0" || true
          else
            echo "sdkmanager no encontrado; continuando."
          fi
      - name: Preparar firma (crear keystore y gradle.properties desde variables)
        script: |
          set -e
          # Variables esperadas en Codemagic (Environment variables):
          # ANDROID_KEYSTORE_BASE64, ANDROID_KEYSTORE_PASSWORD, ANDROID_KEY_ALIAS, ANDROID_KEY_ALIAS_PASSWORD
          if [ -z "$ANDROID_KEYSTORE_BASE64" ] || [ -z "$ANDROID_KEYSTORE_PASSWORD" ] || [ -z "$ANDROID_KEY_ALIAS" ] || [ -z "$ANDROID_KEY_ALIAS_PASSWORD" ]; then
            echo "Faltan variables de firma; define ANDROID_KEYSTORE_BASE64, ANDROID_KEYSTORE_PASSWORD, ANDROID_KEY_ALIAS, ANDROID_KEY_ALIAS_PASSWORD"
            exit 1
          fi

          echo "$ANDROID_KEYSTORE_BASE64" | base64 --decode > "$CM_KEYSTORE_PATH"

          mkdir -p ~/.gradle
          cat > ~/.gradle/gradle.properties <<EOF
          MYAPP_UPLOAD_STORE_FILE=$(basename "$CM_KEYSTORE_PATH")
          MYAPP_UPLOAD_STORE_PASSWORD=$ANDROID_KEYSTORE_PASSWORD
          MYAPP_UPLOAD_KEY_ALIAS=$ANDROID_KEY_ALIAS
          MYAPP_UPLOAD_KEY_PASSWORD=$ANDROID_KEY_ALIAS_PASSWORD
          org.gradle.jvmargs=-Xmx3g -Dkotlin.daemon.jvm.options\="-Xmx3g"
          android.useAndroidX=true
          android.enableJetifier=true
          EOF

          # Copia el keystore a android/ si tu build.gradle lo requiere allÃ­
          cp "$CM_KEYSTORE_PATH" android/keystore.jks || true
      - name: Compilar AAB Release firmado
        script: |
          cd android
          ./gradlew --no-daemon clean bundleRelease

    artifacts:
      - android/app/build/outputs/bundle/release/app-release.aab
